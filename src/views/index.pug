html(lang="en")
  head
    script.
      setTimeout("location.reload(true);", 60000);
    style.
      body {
        background-color: #0f1117;
        color: #ffffff;
        padding: 1em;
        font-family: Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica;
      }
      .green {
        color: #59FF33;
      }
      .red {
        color: #8B0000;
      }
      .yellow {
        color: #F0BC18;
      }
      .historical-ok {
        color: #59FF33;
        font-size: 40px;
        display: inline-block;
      }
      .historical-ok:hover {
        color: #cdffc1;
      }
      .historical-down {
        color: #8B0000;
        font-size: 40px;
        display: inline-block;
      }
      .historical-down:hover {
        color: #ff3359;
      }
      .small {
        font-size: 12px;
      }
      .medium {
        font-size: 16px;
      }
      .large {
        font-size: 24px;
        padding-top: 10px;
      }
      .end {
        text-align: right;
        flex-grow: 1;
        align-self: flex-end;
      }
      .full {
        display: flex;
      }
      .historical {
        display: inline-block;
      }
      .tooltip {
        position: relative;
        cursor: pointer;
      }
      .tooltiptext {
        visibility: hidden;
        font-size: 12px;
        width: 200px;
        background-color: #222222;
        color: #fff;
        text-align: center;
        padding: 5px 5px;
        border-radius: 6px;
        position: absolute;
        top: 45px;
        z-index: 1;
      }
      .tooltip:hover .tooltiptext {
        visibility: visible;
      }
      table, th, td {
        border: 1px solid #fff;
        border-collapse: collapse;
        padding: 8px;
        text-align: left;
        margin-top: 15px;
      }
      a:link, a:visited {
        color: #bbb;
      }
      a:hover {
        color: #fff;
      }
  body
    h1 Stacks Blockchain Status
    h2 Testnet Phase 4 of 4 - 
      a(href="https://github.com/orgs/blockstack/projects") Xenon
    h3 Master Node: 
      if(!data.masterNodePings) 
        span.yellow Checking status...
      else 
        if(data.masterNodePings[0].value === 1) 
          span.green Online
        else 
          span.red Offline
        div.small Last checked: #{fromNow(data.masterNodePings[0].timestamp)}
        - var oldestMasterNodePing = data.masterNodePings[data.masterNodePings.length - 1];
        div.medium.historical
          div
            for ping in data.masterNodePings
              if(ping.value === 1)
                div.historical-ok.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
              else
                div.historical-down.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
            div.full 
              div.small Now&nbsp;&nbsp;
              div.small.end #{fromNow(oldestMasterNodePing.timestamp)}
    h3 Blockchain API (Sidecar): 
      if(!data.sidecarPings) 
        span.yellow Checking status...
      else 
        if(data.sidecarPings[0].value === 1) 
          span.green Online
        else 
          span.red Offline
        div.small Last checked: #{fromNow(data.sidecarPings[0].timestamp)}
        - var oldestSidecarPing = data.sidecarPings[data.sidecarPings.length - 1];
        div.medium.historical
          div
            for ping in data.sidecarPings
              if(ping.value === 1)
                div.historical-ok.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
              else
                div.historical-down.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
            div.full 
              div.small Now&nbsp;&nbsp;
              div.small.end #{fromNow(oldestSidecarPing.timestamp)}
    h3 Explorer: 
      if(!data.explorerPings) 
        span.yellow Checking status...
      else 
        if(data.explorerPings[0].value === 1) 
          span.green Online
        else 
          span.red Offline
        div.small Last checked: #{fromNow(data.explorerPings[0].timestamp)}
        - var oldestExplorerPing = data.explorerPings[data.explorerPings.length - 1];
        div.medium.historical
          div
            for ping in data.explorerPings
              if(ping.value === 1)
                div.historical-ok.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
              else
                div.historical-down.tooltip I
                  span.tooltiptext #{formatTimestamp(ping.timestamp)}
            div.full 
              div.small Now&nbsp;&nbsp;
              div.small.end #{fromNow(oldestExplorerPing.timestamp)}
    div.large Last seen stacks chain tip height: 
      if (data.blockProgressStatus === 2)
        span.red #{data.lastStacksChainTipHeight}
      else if (data.blockProgressStatus === 1)
        span.yellow #{data.lastStacksChainTipHeight}
      else
        span.green #{data.lastStacksChainTipHeight}
    if (data.blockProgressStatus === 2)
      div.medium.red #{fromNow(data.lastStacksChainTipHeightTime)}
    else if (data.blockProgressStatus === 1)
      div.small.yellow #{fromNow(data.lastStacksChainTipHeightTime)}
    else
      div.small.green #{fromNow(data.lastStacksChainTipHeightTime)}

    div.large Average block rate:
      div
        if (data.showLastHourAverage)
          if(data.lastHourBlockRateStatus === 2)
            span.red ~#{data.lastHourAverageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last hour
          else if (data.lastHourBlockRateStatus === 1)
            span.yellow ~#{data.lastHourAverageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last hour
          else 
            span.green ~#{data.lastHourAverageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last hour
      div
        if (!data.calculatingBlockRate)
          if(data.blockRateStatus === 2)
            span.red ~#{data.averageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last #{data.blockRateDuration.toFixed(1)}h
          else if (data.blockRateStatus === 1)
            span.yellow ~#{data.averageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last #{data.blockRateDuration.toFixed(1)}h
          else 
            span.green ~#{data.averageBlockRate.toFixed(0)} #{data.blockRateUnits} 
            span in the last #{data.blockRateDuration.toFixed(1)}h
        else 
          span calculating...
    div.large Last chain reset: 
      if (data.lastChainReset)
        span #{fromNow(data.lastChainReset)}
      else 
        span Unknown
    div.large Last seen burn chain block height: 
      span #{data.lastBurnBlockHeight}
    div.large Exit at block: 
      if (data.exitAtBlock)
        span #{data.exitAtBlock}
      else 
        span Unknown
    div.large Estimated time until next chain reset: 
      if (data.estimatedTimeUntilReset)
        span #{data.estimatedTimeUntilReset}
      else 
        span Unknown

    h2 Transactions:
      if (data.reseedingStep != 0)
        div.medium Currently reseeding transactions... 
          if (data.reseedingStep == 1) 
            span calling faucet
          if (data.reseedingStep == 2)
            span transferring tokens
          if (data.reseedingStep == 3)
            span deploying contract
          if (data.reseedingStep == 4)
            span calling contract function

      if (data.seededFaucetTx.txid || data.seededTokenTransferTx.txid || data.seededContractDeployTx.txid || data.seededContractCallTx.txid)
        table
          tr
            th Transaction Type
            th TXID (Explorer Link)
            th Broadcasted
            th Status
          if (data.seededFaucetTx.txid)
            tr
              td Faucet Transfer
              td
                a.small(href=getExplorerTxURL(data.seededFaucetTx.txid), target="_blank") #{data.seededFaucetTx.txid}
              td #{fromNow(data.seededFaucetTx.broadcasted)}
              td
                if (data.seededFaucetTx.status === 'success') 
                  span.green #{data.seededFaucetTx.status}
                else 
                  span #{data.seededFaucetTx.status}
          if (data.seededTokenTransferTx.txid)
            tr
              td Token Transfer
              td
                a.small(href=getExplorerTxURL(data.seededTokenTransferTx.txid), target="_blank") #{data.seededTokenTransferTx.txid}
              td #{fromNow(data.seededTokenTransferTx.broadcasted)}
              td 
                if (data.seededTokenTransferTx.status === 'success') 
                  span.green #{data.seededTokenTransferTx.status}
                else 
                  span #{data.seededTokenTransferTx.status}
          if (data.seededContractDeployTx.txid)
            tr
              td Contract Deploy
              td
                a.small(href=getExplorerTxURL(data.seededContractDeployTx.txid) target="_blank") #{data.seededContractDeployTx.txid}
              td #{fromNow(data.seededContractDeployTx.broadcasted)}
              td 
                if (data.seededContractDeployTx.status === 'success') 
                  span.green #{data.seededContractDeployTx.status}
                else 
                  span #{data.seededContractDeployTx.status}
          if (data.seededContractCallTx.txid)
            tr
              td Contract Call
              td
                a.small(href=getExplorerTxURL(data.seededContractCallTx.txid) target="_blank") #{data.seededContractCallTx.txid}
              td #{fromNow(data.seededContractCallTx.broadcasted)}
              td 
                if (data.seededContractCallTx.status === 'success') 
                  span.green #{data.seededContractCallTx.status}
                else 
                  span #{data.seededContractCallTx.status}
      if (data.reseedAbortError)
        div.medium Transaction seeding aborted due to: 
          p #{data.reseedAbortError}
    div.medium 
      span Data also available in  
        a(href='/json') JSON
      span  | 
      span Contribute to this page on  
        a(href="https://www.github.com/yknl/stacks-chain-status") GitHub
